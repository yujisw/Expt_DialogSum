import argparse
import math
import pandas as pd
import scipy.stats as st
import numpy as np
import matplotlib.pyplot as plt
import random

parser = argparse.ArgumentParser()
parser.add_argument("baseline_summary_path", type=str, help="summary file generated by models.")
parser.add_argument("proposal_summary_path", type=str, help="like DATA_DIR/test.target")
args, rest = parser.parse_known_args()

xa = pd.read_csv(args.baseline_summary_path)['rouge2']
xb = pd.read_csv(args.proposal_summary_path)['rouge2']
xa = xa * 100
xb = xb * 100

fig = plt.figure(dpi=96)
ax1 = fig.add_subplot(211) 
ax1.set_xlim(0, 100)
ax1.set_ylim(0, 120)
ax1.hist(xa,bins=50,range=(0,120),color='r')

ax2 = fig.add_subplot(212) 
ax2.set_xlim(0, 100)
ax2.set_ylim(0, 120)
ax2.hist(xb,bins=50,range=(0,120),color='b')

fig.savefig("img.png")
# plt.show()

print("baseline(標本A) mean:", xa.mean())
print("proposal(標本B) mean:", xb.mean())

print('====シャピロ・ウィルク検定====')
_, pa = st.shapiro(xa)
_, pb = st.shapiro(xb)

text_A = "正規分布ではない" if pa < 0.05 else "正規分布である"
text_B = "正規分布ではない" if pb < 0.05 else "正規分布である"
print(f'標本A p値 = {pa:.5f} ->', text_A)
print(f'標本B p値 = {pb:.5f} ->', text_B)

# u2 = xa.var(ddof=1)  # 母集団の分散推定値（不偏分散）
# m = xa.mean()        # 標本平均
# DF = len(xa)-1       # 自由度
# SE = math.sqrt(u2/len(xa)) # 標準誤差

# CI1,CI2 = st.t.interval( alpha=0.95, loc=m, scale=SE, df=DF )
# print(f'標本Aの母平均の95%信頼区間CI = [{CI1:.2f} , {CI2:.2f}]')

# t, p = st.ttest_ind(xa, xb, equal_var=True)
# MU = abs(xa.mean()-xb.mean())
# SE =  MU/t
# DF = len(xa)+len(xb)-2
# CI = st.t.interval( alpha=0.95, loc=MU, scale=SE, df=DF )

# print('====対応なしt検定====')
# print(f'p値 = {p:.3f}')
# print(f't値 = {t:.2f}')
# print(f'平均値の差   = {MU:.2f}')
# print(f'差の標準誤差 = {SE:.2f}')
# print(f'平均値の差の95%信頼区間CI = [{CI[0]:.2f} , {CI[1]:.2f}]')

print('====ルビーン検定====')
_, p = st.levene(xa,xb,center='mean')
text = "等分散ではない" if p < 0.05 else "等分散である"
print(f'p値 = {p:.3f} ->', text)

print('====対応ありt検定====')
t, p = st.ttest_rel(xa, xb)
ES_t = t / math.sqrt(len(xa))
text = "有意差はある" if p < 0.05 else "有意差はない"
print(f't値 = {abs(t):.3f}')
print(f'標本効果量ES_t = {abs(ES_t):.5f}')
print(f'p値 = {p:.3f} ->', text)

# A_var = np.var(xa, ddof=1)  # Aの不偏分散
# B_var = np.var(xb, ddof=1)  # Bの不偏分散
# A_df = len(xa) - 1  # Aの自由度
# B_df = len(xb) - 1  # Bの自由度
# f = A_var / B_var  # F比の値
# one_sided_pval1 = st.f.cdf(f, A_df, B_df)  # 片側検定のp値 1
# one_sided_pval2 = st.f.sf(f, A_df, B_df)   # 片側検定のp値 2
# two_sided_pval = min(one_sided_pval1, one_sided_pval2) * 2  # 両側検定のp値

# print('F:       ', round(f, 3))
# print('p-value: ', round(two_sided_pval, 3))

print('====ランダム化検定====')
n = len(xa)
B = 5000
d_var = xa.mean() - xb.mean()
count = 0
for b in range(B):
    xa_tmp = xa.copy()
    xb_tmp = xb.copy()
    for j in range(n): # Generate U*b
        if random.choice([False, True]):
            c = xb_tmp[j]
            xb_tmp[j] = xa_tmp[j]
            xa_tmp[j] = c
    d_var_tmp = abs(xa_tmp.mean() - xb_tmp.mean())
    if d_var_tmp >= abs(d_var):
        count+=1
p_value = count/B
text = "有意差はある" if p_value < 0.05 else "有意差はない"
print("p_value:",p_value, "->", text)