import argparse
import math
import pandas as pd
import scipy.stats as st
import numpy as np
import matplotlib.pyplot as plt
import random

# parser = argparse.ArgumentParser()
# parser.add_argument("baseline_summary_path", type=str, help="summary file generated by models.")
# parser.add_argument("proposal_summary_path", type=str, help="like DATA_DIR/test.target")
# args, rest = parser.parse_known_args()

xa = pd.read_csv("output/2021-01-12-22-36-14/scores.csv")['rouge2']
xb = pd.read_csv("output/2021-01-12-07-39-46/scores.csv")['rouge2']
xa = xa * 100
xb = xb * 100

print("baseline(標本A) mean:", xa.mean())
print("proposal(標本B) mean:", xb.mean())

print('====ランダム化Tukey HSD検定====')
n = len(xa)
B = 5000
m = 5
x = np.zeros((m,n))
x[0] = pd.read_csv("output/2021-01-12-22-36-14/scores.csv")['rouge2'] * 100
x[1] = pd.read_csv("output/2021-01-11-12-47-39/scores.csv")['rouge2'] * 100
x[2] = pd.read_csv("output/2021-01-13-14-54-43/scores.csv")['rouge2'] * 100
x[3] = pd.read_csv("output/2021-01-11-12-48-08/scores.csv")['rouge2'] * 100
x[4] = pd.read_csv("output/2021-01-12-07-39-46/scores.csv")['rouge2'] * 100
count_table = np.zeros((m,m))
d_table = np.zeros((m,m))
for i in range(m):
    for j in range(m):
        d_table[i, j] = x[i].mean() - x[j].mean()
print(d_table)
for b in range(B):
    x_tmp = x.copy()
    for j in range(n): # Generate U*b
        jth_row = np.array([x_tmp[i,j] for i in range(m)])
        jth_row = np.random.permutation(jth_row)
        for i in range(m):
            x_tmp[i,j] = jth_row[i]
    x_tmp_mean = np.zeros(m)
    for i in range(m):
        x_tmp_mean[i] = x_tmp[i].mean()
    d_max = x_tmp_mean.max() - x_tmp_mean.min()
    # print(x_tmp_mean)
    # print(d_max)
    for i in range(m):
        for j in range(m):
            if d_max >= abs(d_table[i,j]):
                count_table[i,j] = count_table[i,j] + 1
p_value_table = count_table/B
print(count_table)
print(p_value_table)
# text = "有意差はある" if p_value < 0.05 else "有意差はない"
# print("p_value:",p_value, "->", text)

# print('====ランダム化検定====')
# n = len(xa)
# B = 5000
# d_var = xa.mean() - xb.mean()
# count = 0
# for b in range(B):
#     xa_tmp = xa.copy()
#     xb_tmp = xb.copy()
#     for j in range(n): # Generate U*b
#         if random.choice([False, True]):
#             c = xb_tmp[j]
#             xb_tmp[j] = xa_tmp[j]
#             xa_tmp[j] = c
#     d_var_tmp = abs(xa_tmp.mean() - xb_tmp.mean())
#     if d_var_tmp >= abs(d_var):
#         count+=1
# p_value = count/B
# text = "有意差はある" if p_value < 0.05 else "有意差はない"
# print("p_value:",p_value, "->", text)